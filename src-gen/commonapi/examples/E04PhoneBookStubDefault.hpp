/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_E04_Phone_Book_STUB_DEFAULT_HPP_
#define V0_COMMONAPI_EXAMPLES_E04_Phone_Book_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <commonapi/examples/E04PhoneBookStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace commonapi {
namespace examples {

/**
 * Provides a default implementation for E04PhoneBookStubRemoteEvent and
 * E04PhoneBookStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT E04PhoneBookStubDefault
    : public virtual E04PhoneBookStub {
public:
    COMMONAPI_EXPORT E04PhoneBookStubDefault();

    COMMONAPI_EXPORT E04PhoneBookStubRemoteEvent* initStubAdapter(const std::shared_ptr< E04PhoneBookStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct >& getPhoneBookAttribute();
    COMMONAPI_EXPORT virtual const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct >& getPhoneBookAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setPhoneBookAttribute(std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct > _value);

    /*
     * description: 
     * filter operations
     */
    COMMONAPI_EXPORT virtual void setPhoneBookDataFilter(const std::shared_ptr<CommonAPI::ClientId> _client, E04PhoneBook::elementFilterStruct _elementFilter, std::vector< E04PhoneBook::contentFilterStruct > _contentFilter, setPhoneBookDataFilterReply_t _reply);

    /*
     * description: 
     * filter result
     */
    COMMONAPI_EXPORT virtual void firePhoneBookDataSetSelective(const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookDataElementMap > &_phoneBookDataSet, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    COMMONAPI_EXPORT virtual void onPhoneBookDataSetSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
    /// Hook method for reacting accepting or denying new subscriptions
    COMMONAPI_EXPORT virtual bool onPhoneBookDataSetSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);

    
protected:
    /*
     * description: 
     * the phone book itself
     */
    COMMONAPI_EXPORT virtual bool trySetPhoneBookAttribute(std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct > _value);
    COMMONAPI_EXPORT virtual bool validatePhoneBookAttributeRequestedValue(const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct > &_value);
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual E04PhoneBookStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(E04PhoneBookStubDefault *_defaultStub);

        /*
         * description: 
         * the phone book itself
         */


    private:
        E04PhoneBookStubDefault *defaultStub_;
    };
protected:
    E04PhoneBookStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    /*
     * description: 
     * the phone book itself
     */
    std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct > phoneBookAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace examples
} // namespace commonapi



#endif // V0_COMMONAPI_EXAMPLES_E04_Phone_Book_STUB_DEFAULT
