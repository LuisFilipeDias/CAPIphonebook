/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201801251438.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_E04_Phone_Book_DBUS_STUB_ADAPTER_HPP_
#define V0_COMMONAPI_EXAMPLES_E04_Phone_Book_DBUS_STUB_ADAPTER_HPP_

#include <commonapi/examples/E04PhoneBookStub.hpp>
#include "commonapi/examples/E04PhoneBookDBusDeployment.hpp"
#include <commonapi/examples/E04PhoneBookDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace commonapi {
namespace examples {

template <typename _Stub = ::commonapi::examples::E04PhoneBookStub, typename... _Stubs>
class E04PhoneBookDBusStubAdapterInternal
    : public virtual E04PhoneBookStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> E04PhoneBookDBusStubAdapterHelper;

    ~E04PhoneBookDBusStubAdapterInternal() {
        deactivateManagedInstances();
        E04PhoneBookDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return E04PhoneBook::getInterface();
    }

    /*
     * description: 
     * the phone book itself
     */
    void firePhoneBookAttributeChanged(const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct >& value);

    /*
     * description: 
     * filter result
     */
    void firePhoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookDataElementMap > &_phoneBookDataSet);
    void sendPhoneBookDataSetSelective(const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookDataElementMap > &_phoneBookDataSet, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForPhoneBookDataSetSelective();

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::commonapi::examples::E04PhoneBookStub,
        CommonAPI::Version
        > getE04PhoneBookInterfaceVersionStubDispatcher;

    /*
     * description: 
     * the phone book itself
     */
    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::commonapi::examples::E04PhoneBookStub,
            std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct >,
            CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookStructDeployment_t >
            > getPhoneBookAttributeStubDispatcher;

    /*
     * description: 
     * filter operations
     */
    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::commonapi::examples::E04PhoneBookStub,
        std::tuple< E04PhoneBook::elementFilterStruct, std::vector< E04PhoneBook::contentFilterStruct >>,
        std::tuple< >,
        std::tuple< ::commonapi::examples::E04PhoneBook_::elementFilterStructDeployment_t, CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::contentFilterStructDeployment_t >>,
        std::tuple< >
    
        > setPhoneBookDataFilterStubDispatcher;

    static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
        ::commonapi::examples::E04PhoneBookStub,
        E04PhoneBookStubAdapter,
        std::tuple<>,
        std::tuple<bool>
        > subscribePhoneBookDataSetSelectiveStubDispatcher;
    
    static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
        ::commonapi::examples::E04PhoneBookStub,
        E04PhoneBookStubAdapter,
     std::tuple<>,
        std::tuple<>
        > unsubscribePhoneBookDataSetSelectiveStubDispatcher;

    E04PhoneBookDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      E04PhoneBookDBusStubAdapterHelper(_address, _connection, false, _stub) {
        /*
         * description: 
         * the phone book itself
         */
        E04PhoneBookDBusStubAdapterHelper::addStubDispatcher({ "getPhoneBookAttribute", "" }, &getPhoneBookAttributeStubDispatcher);
        /*
         * description: 
         * filter operations
         */
        E04PhoneBookDBusStubAdapterHelper::addStubDispatcher({ "setPhoneBookDataFilter", "(bbbbbb)a(is)" }, &setPhoneBookDataFilterStubDispatcher);
        E04PhoneBookDBusStubAdapterHelper::addStubDispatcher({ "subscribeForphoneBookDataSetSelective", "" }, &subscribePhoneBookDataSetSelectiveStubDispatcher);
        E04PhoneBookDBusStubAdapterHelper::addStubDispatcher({ "unsubscribeFromphoneBookDataSetSelective", "" }, &unsubscribePhoneBookDataSetSelectiveStubDispatcher);
        subscribersForPhoneBookDataSetSelective_ = std::make_shared<CommonAPI::ClientIdList>();
        E04PhoneBookDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getE04PhoneBookInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"getPhoneBookAttribute\">\n"
            "<arg name=\"value\" type=\"a(sssssa{is})\" direction=\"out\" />"
            "</method>\n"
            "<signal name=\"onPhoneBookAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"a(sssssa{is})\" />\n"
            "</signal>\n"
            /*
             * description: 
             * filter result
             */
            "<signal name=\"phoneBookDataSet\">\n"
            "<arg name=\"phoneBookDataSet\" type=\"aa{i(uv)}\" />\n"
            "</signal>\n"
            /*
             * description: 
             * filter operations
             */
            "<method name=\"setPhoneBookDataFilter\">\n"
            "<arg name=\"_elementFilter\" type=\"(bbbbbb)\" direction=\"in\" />\n"
            "<arg name=\"_contentFilter\" type=\"a(is)\" direction=\"in\" />\n"
            "</method>\n"
            ;
        return introspectionData.c_str();
    }

private:
    std::mutex PhoneBookDataSetSelectiveEventMutex_;
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::commonapi::examples::E04PhoneBookStub,
    CommonAPI::Version
    > E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::getE04PhoneBookInterfaceVersionStubDispatcher(&E04PhoneBookStub::lockInterfaceVersionAttribute, &E04PhoneBookStub::getInterfaceVersion, "uu");

/*
 * description: 
 * the phone book itself
 */
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::commonapi::examples::E04PhoneBookStub,
        std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct >,
        CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookStructDeployment_t >
        > E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::getPhoneBookAttributeStubDispatcher(
            &::commonapi::examples::E04PhoneBookStub::lockPhoneBookAttribute,
            &::commonapi::examples::E04PhoneBookStub::getPhoneBookAttribute
            , "a(sssssa{is})"
            );


/*
 * description: 
 * filter operations
 */
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::commonapi::examples::E04PhoneBookStub,
    std::tuple< E04PhoneBook::elementFilterStruct, std::vector< E04PhoneBook::contentFilterStruct >>,
    std::tuple< >,
    std::tuple< ::commonapi::examples::E04PhoneBook_::elementFilterStructDeployment_t, CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::contentFilterStructDeployment_t >>,
    std::tuple< >

    > E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::setPhoneBookDataFilterStubDispatcher(
    &E04PhoneBookStub::setPhoneBookDataFilter, "",
    std::make_tuple(static_cast< ::commonapi::examples::E04PhoneBook_::elementFilterStructDeployment_t* >(nullptr), static_cast< CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::contentFilterStructDeployment_t >* >(nullptr)),
    std::make_tuple());

/*
 * description: 
 * the phone book itself
 */
template <typename _Stub, typename... _Stubs>
void E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::firePhoneBookAttributeChanged(const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct >& value) {
    CommonAPI::Deployable< std::vector< E04PhoneBook::phoneBookStruct >, CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookStructDeployment_t >> deployedValue(value, static_cast< CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookStructDeployment_t >* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::vector< ::commonapi::examples::E04PhoneBook::phoneBookStruct >,
        CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookStructDeployment_t >
    >
    >>
        ::sendSignal(
            *this,
            "onPhoneBookAttributeChanged",
            "a(sssssa{is})",
            deployedValue
    
    );
}

/*
 * description: 
 * filter result
 */
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::commonapi::examples::E04PhoneBookStub,
    E04PhoneBookStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::subscribePhoneBookDataSetSelectiveStubDispatcher(&E04PhoneBookStubAdapter::subscribeForphoneBookDataSetSelective, "b");

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::commonapi::examples::E04PhoneBookStub,
    E04PhoneBookStubAdapter,
    std::tuple<>,
    std::tuple<>
    > E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::unsubscribePhoneBookDataSetSelectiveStubDispatcher(&E04PhoneBookStubAdapter::unsubscribeFromphoneBookDataSetSelective, "");
template <typename _Stub, typename... _Stubs>
void E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::firePhoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookDataElementMap > &_phoneBookDataSet) {
    std::shared_ptr<CommonAPI::DBus::DBusClientId> dbusClient = std::dynamic_pointer_cast<CommonAPI::DBus::DBusClientId, CommonAPI::ClientId>(_client);

    if(dbusClient)
    {
        CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable< std::vector< ::commonapi::examples::E04PhoneBook::phoneBookDataElementMap >, CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookDataElementMapDeployment_t >>
        >>::sendSignal(
                dbusClient->getDBusId(),
                *this,
                "phoneBookDataSet",
                "aa{i(uv)}",
        CommonAPI::Deployable< std::vector< ::commonapi::examples::E04PhoneBook::phoneBookDataElementMap >, CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookDataElementMapDeployment_t >>(_phoneBookDataSet, static_cast< CommonAPI::DBus::ArrayDeployment< ::commonapi::examples::E04PhoneBook_::phoneBookDataElementMapDeployment_t >* >(nullptr))
        );
    }
}
template <typename _Stub, typename... _Stubs>
void E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::sendPhoneBookDataSetSelective(const std::vector< ::commonapi::examples::E04PhoneBook::phoneBookDataElementMap > &_phoneBookDataSet, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList = _receivers;

    if (!_receivers) {
        std::lock_guard < std::mutex > itsLock(PhoneBookDataSetSelectiveEventMutex_);
        actualReceiverList = subscribersForPhoneBookDataSetSelective_;
    }

    for (auto clientIdIterator = actualReceiverList->cbegin(); clientIdIterator != actualReceiverList->cend(); clientIdIterator++) {
        bool found(false);
        {
            std::lock_guard < std::mutex > itsLock(PhoneBookDataSetSelectiveEventMutex_);
            found = (subscribersForPhoneBookDataSetSelective_->find(*clientIdIterator) != subscribersForPhoneBookDataSetSelective_->end());
        }
        if (!_receivers || found) {
            firePhoneBookDataSetSelective(*clientIdIterator, _phoneBookDataSet);
        }
    }
}
template <typename _Stub, typename... _Stubs>
void E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::subscribeForphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = E04PhoneBookDBusStubAdapterHelper::stub_->onPhoneBookDataSetSelectiveSubscriptionRequested(clientId);
    if (ok) {
        {
            std::lock_guard<std::mutex> itsLock(PhoneBookDataSetSelectiveEventMutex_);
            subscribersForPhoneBookDataSetSelective_->insert(clientId);
        }
        E04PhoneBookDBusStubAdapterHelper::stub_->onPhoneBookDataSetSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}
template <typename _Stub, typename... _Stubs>
void E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::unsubscribeFromphoneBookDataSetSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    E04PhoneBookDBusStubAdapterHelper::stub_->onPhoneBookDataSetSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
    {
        std::lock_guard<std::mutex> itsLock(PhoneBookDataSetSelectiveEventMutex_);
        subscribersForPhoneBookDataSetSelective_->erase(clientId);
    }
}
template <typename _Stub, typename... _Stubs>
std::shared_ptr<CommonAPI::ClientIdList> const E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>::getSubscribersForPhoneBookDataSetSelective() {
    std::lock_guard<std::mutex> itsLock(PhoneBookDataSetSelectiveEventMutex_);
    return std::make_shared<CommonAPI::ClientIdList>(*subscribersForPhoneBookDataSetSelective_);
}


template <typename _Stub = ::commonapi::examples::E04PhoneBookStub, typename... _Stubs>
class E04PhoneBookDBusStubAdapter
    : public E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< E04PhoneBookDBusStubAdapter<_Stub, _Stubs...>> {
public:
    E04PhoneBookDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          E04PhoneBookDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace examples
} // namespace commonapi

#endif // V0_COMMONAPI_EXAMPLES_E04_Phone_Book_DBUS_STUB_ADAPTER_HPP_
